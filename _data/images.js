const fs = require('fs').promises,
    path = require('path'),
    exif = require('fast-exif'),
    got = require('got'),
    IMAGE_EXTENSIONS = ['jpeg', 'jpg', 'png'],
    Feed = require('feed').Feed;

const feed = new Feed({
    title: 'Lands Upon',
    description: 'A photo blog of the lands that @arpitbatra123 has walked upon',
    id: 'https://lands-upon.netlify.app/',
    link: 'https://lands-upon.netlify.app/',
    language: 'en',
    image: 'https://lands-upon.netlify.app/og.jpg',
    favicon: 'https://lands-upon.netlify.app/favicon.ico',
    feedLinks: {
        rss: 'https://lands-upon.netlify.app/feed.xml',
    },
    author: {
        name: 'Arpit Batra',
        email: 'arpitbatra123@gmail.com',
    }
});

// https://stackoverflow.com/questions/1140189/converting-latitude-and-longitude-to-decimal-values
function ConvertDMSToDD(direction, degrees, minutes, seconds) {
    var dd = degrees + minutes / 60 + seconds / (60 * 60);

    if (direction == 'S' || direction == 'W') {
        dd = dd * -1;
    } // Don't do anything for N or E
    return dd;
}

function processLocationInfo(file, tags) {
    if (!tags || !tags.gps || !tags.gps.GPSLatitudeRef) {
        console.log(`${file} has no gps info available`);
        return;
    }

    const gps = {
        latitude: ConvertDMSToDD(tags.gps.GPSLatitudeRef, ...tags.gps.GPSLatitude),
        longitude: ConvertDMSToDD(tags.gps.GPSLongitudeRef, ...tags.gps.GPSLongitude)
    };

    return gps;
}

async function getLocationName(gps) {
    const response = await got(
        `https://api.mapbox.com/geocoding/v5/mapbox.places/${gps.longitude},${gps.latitude}.json?access_token=pk.eyJ1IjoiYXJwaXRiYXRyYTEyMyIsImEiOiJja2Q2N3ViMGkwbzgzMnFuem55NG10OHNqIn0.zoeIkNpnI16a6Vz69A1UCA`
    ).json();

    return response.features[1].place_name;
}

module.exports = async function getImages() {
    let files = await fs.readdir(path.resolve('assets/images'));

    // Making sure only images are processed, autogenerated files like .DS_Store are ignored
    files = files.filter((file) => {
        const extension = file.split('.')[1];
        return IMAGE_EXTENSIONS.includes(extension);
    });

    files = files.map(async (file) => {
        const tags = await exif.read(path.resolve(`assets/images/${file}`));
        const gps = processLocationInfo(file, tags);
        const date = tags && tags.exif && new Date(tags.exif.DateTimeOriginal);

        let name;
        if (gps) {
            name = await getLocationName(gps);
            feed.addItem({
                title: file,
                id: `https://lands-upon.netlify.app/${file}`,
                link: `https://lands-upon.netlify.app/#${file}`,
                date: new Date(date),
                content: `<img src='https://lands-upon.netlify.app/${file}'>`,
                description: `<img src='https://lands-upon.netlify.app/${file}'>`
            });
        }

        return {
            file,
            gps,
            name,
            date,
            gpsImage: `https://api.mapbox.com/styles/v1/mapbox/outdoors-v11/static/${gps.longitude},${gps.latitude},15,0/300x200@2x?access_token=pk.eyJ1IjoiYXJwaXRiYXRyYTEyMyIsImEiOiJja2Q2N3ViMGkwbzgzMnFuem55NG10OHNqIn0.zoeIkNpnI16a6Vz69A1UCA&attribution=false&logo=false`
        };
    });

    let finalData = await Promise.all(files);
    finalData = finalData.filter((item) => item.gps).sort((a, b) => a.date.getTime() - b.date.getTime());
    
    fs.writeFile(path.resolve('feed.xml'), feed.rss2());
    return finalData;
};
